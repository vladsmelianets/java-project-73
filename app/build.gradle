plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'jacoco'
    id "com.github.ben-manes.versions" version '0.42.0'
    id 'org.liquibase.gradle' version '2.2.0'

    id 'org.springframework.boot' version '3.0.7'
    id 'io.spring.dependency-management' version '1.1.0'
}

group 'hexlet.code'
version '1.0-SNAPSHOT'

application {
    mainClass = 'hexlet.code.AppApplication'
}

repositories {
    mavenCentral()
}

dependencies {

    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.projectlombok:lombok'


    implementation(
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-validation',
//            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.security:spring-security-crypto:6.0.2', //TODO remove after activating security-starter
            'org.liquibase:liquibase-core',
    )

    runtimeOnly(
            'com.h2database:h2',
            'org.postgresql:postgresql:42.6.0'
    )

    liquibaseRuntime(
            sourceSets.main.output,
            'org.liquibase:liquibase-core',
//            'info.picocli:picocli:4.7.1', //TODO research why it's in boilerplate
            'org.liquibase.ext:liquibase-hibernate6:4.21.1',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'com.h2database:h2',
    )

    testImplementation(
//            'org.springframework.boot:spring-boot-starter-security', //TODO do we really need this here?
//            'org.springframework.security:spring-security-test',
            'org.springframework.boot:spring-boot-starter-test',
//            'com.tobedevoured.modelcitizen:spring:0.8.3'
    )
}

compileJava {
    options.release = 17
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

diffChangelog {
    dependsOn compileJava
}

// modifying checkstyleMain to exclude generated sources from the checks
checkstyleMain {
    source = fileTree('src/main/java')
}
checkstyleMain.exclude('build/')

// Настраиваем Liquibase
liquibase {
    activities {
        main {
            // Указываем путь, по которому будет сгенерирован файл миграции
            changeLogFile 'src/main/resources/db/changelog/changelog-master.yml'
            // Указывем источник, с которым будут сравниваться изменения
            // Это база данных, изначально она пустая
            url 'jdbc:h2:./taskManager'
            // Имя пользователя и пароль для подключения к базе
            username ''
            password ''
            // Сравниваем с моделями, задавая пакет
            referenceUrl 'hibernate:spring:hexlet.code.model' +
                    // Указываем диалект
                    '?dialect=org.hibernate.dialect.H2Dialect' +
                    // Указываем правила именования таблиц и столбцов,
                    // чтобы они соответствовали правилам Spring
                    '&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy'
        }
    }
}
